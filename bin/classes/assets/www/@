<!DOCTYPE html>
<html>
<head>
<title>Cordova</title>
<meta charset="utf-8" />
<link rel="stylesheet" href="jquery.mobile-1.2.0-beta.1.min.css" />
<link rel="stylesheet" href="css/jquery.gritter.css" />
<link rel="stylesheet" href="style.css" />

<script type="text/javascript" charset="utf-8" src="cordova-2.0.0.js"></script>
<script src="jquery-1.8.1.min.js"></script>
<script src="jquery.gritter.js"></script>
<script src="jquery.mobile-1.2.0-beta.1.min.js"></script>

<script src="jquery.json-2.4.min.js"></script>

<script type="text/javascript" charset="utf-8">  

var SYNC_SERVER = "http://192.168.90.54:8080/sync";

$.support.cors = true;
$.mobile.allowCrossDomainPages = true;

var CONFIG = [];

var WEEK_DAYS = new Array(7);
WEEK_DAYS[0]="nd";
WEEK_DAYS[1]="pn";
WEEK_DAYS[2]="wt";
WEEK_DAYS[3]="sr;
WEEK_DAYS[4]="czw";
WEEK_DAYS[5]="pt";
WEEK_DAYS[6]="sb";


var MEDIA = new Array();
var MEDIA_PATH = "/android_asset/sounds/";

function set_config(value, id, serialize=false)
{
    if(serialize == false)
	window.localStorage.setItem(id, value);
    else
	window.localStorage.setItem(id, $.toJSON( value ));
}

function load_config()
{
	CONFIG["SHORT_BREAK_TIME"] = parseInt(window.localStorage.getItem("SHORT_BREAK_TIME"));
	CONFIG["POMODORO_TIME"] = parseInt(window.localStorage.getItem("POMODORO_TIME"));
	CONFIG["LONG_BREAK_TIME"] = parseInt(window.localStorage.getItem("LONG_BREAK_TIME"));
	CONFIG["TASKS"] = $.evalJSON(window.localStorage.getItem("TASKS"));
	
}

function get_week_day()
{
	d = new Date();
	return WEEK_DAYS[d.getDay()];
}

function conut_time_to_finish_work()
{
}

//If true returned - all is done
function state_machine()
{
    var tasks = CONFIG["TASKS"][get_week_day()];

    if(tasks.length == 0)
	return true;

    state = tasks.shift();

    switch(state)
    {
        case "#short_break":
	     MEDIA["start_break"].play(); 
	     start_timer(CONFIG["SHORT_BREAK_TIME"]);
        break;
        case "#long_break":
	     MEDIA["start_break"].play(); 
	     start_timer(CONFIG["LONG_BREAK_TIME"]);
	break;

	default:
	     MEDIA["finish_break"].play(); 
	     $(
             start_timer(CONFIG["POMODORO_TIME"]);
        break;
    }
}

function start_timer(time_left)
{ 
  var min = Math.floor(time_left/60);
  var sec = Math.floor(time_left-min*60);
  $("#timer").text(((""+min).length == 1 ? "0"+min : min )+":"+((""+sec).length == 1 ? "0"+sec : sec));
  setTimeout(function() { 
      time_left-=1;
      if(time_left >= 0)
      {
      	  update_progress_bar(time_left/CONFIG["POMODORO_TIME"]);
          start_timer(time_left); 
      }
      else
      {
                state_machine(); 
      }
  }, 1);
}

function update_progress_bar(percent)
{
	$("#progress").css("width", percent*260+"px");
}

function onDeviceReady(){  
	MEDIA["start_break"] = new Media(MEDIA_PATH+"start_break.mp3");
	MEDIA["finish_break"] = new Media(MEDIA_PATH+"finish_break.mp3");
	

	if(window.localStorage.getItem("POMODORO_TIME") == null)
		set_config(60*25, "POMODORO_TIME");
	if(window.localStorage.getItem("SHORT_BREAK_TIME") == null)
		set_config(60*5, "SHORT_BREAK_TIME");
	if(window.localStorage.getItem("LONG_BREAK_TIME") == null)
		set_config(60*15, "LONG_BREAK_TIME");
	if(window.localStorage.getItem("TASKS") == null)
	{
	    var empty = {};
	    for(weekday in WEEK_DAYS)
	    {
		empty[WEEK_DAYS[weekday]] = {};
	    }
	    set_config(empty, "TASKS", true);
	}
		
	load_config();
		
	state_machine();


	if(navigator.network.connection.type != Connection.NONE)
	{
	    $("#sync").bind("click", function(event, ui) {
		$.getJSON(SYNC_SERVER, function(data) {

		  $.gritter.add({ 
			title: 'Synchronizacja zakończona!',
			text: 'Synchronizacja z serwerem zakończyła się sukcesem.'
		    });
	
			set_config(data["config"]["pomodoro_length"], "POMODORO_TIME");
			set_config(data["config"]["short_break_length"], "SHORT_BREAK_TIME");
			set_config(data["config"]["long_break_length"], "LONG_BREAK_TIME");
			set_config(data["config"]["tasks"], "TASKS", true);
			
			load_config();
			
		}).error(function() { 
			$.gritter.add({ 
			title: 'Błąd synchronizacji!',
			text: 'Nie udało się zsynchronizować z serwerem: <b>' + SYNC_SERVER  + '</b>.'
			});
		});
		});
	    } else
	    {
		    $("#sync").addClass('ui-disabled');
	    }
    }  
document.addEventListener("deviceready", onDeviceReady, false);

  </script>  
</head>
<body> 
<div data-role="page">
	<div data-role="header">
		<h1>PP - Executiener</h1>
	</div>

	<div data-role="content">	
		<p>Ilość dni bez przerwania planu: <strong>5</strong>.</p>	
		<p>Czas zakończenia pracy: <strong id="time_to_finish_work"></strong></p>	
		<h2>Matematyka</h2>
		<div id="timer_contaiter">
			<div id="timer">00:00</div>
			<div id="progress"></div>
		</div>
		<button>Odrocz zadanie</button>
		<button id="next_task">Następne zadanie</button>
		<br><br><br>
		<button id="sync" data-icon="refresh">Synchronizuj</button>
	</div>
</div>
</body>
</html>
